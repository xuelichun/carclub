package com.zeepn.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.zeepn.bean.PiPayRecord;
import com.zeepn.bean.PriView;
import com.zeepn.dao.BackPreInfoDao;
import com.zeepn.service.BackPreInfoService;
import com.zeepn.utils.FeeUtils;
import com.zeepn.utils.Page;
import com.zeepn.utils.PageTool;
import com.zeepn.utils.TransCoding;

@Service("backPreInfoService")
public class BackPreInfoServiceImpl implements BackPreInfoService{

	private PageTool pageTool=new PageTool();
	/**
	 * 自动注入dao
	 */
	@Autowired
	BackPreInfoDao backPreInfoDao;
	
	@Override
	public HashMap<Integer, List<Object>> selectAllPreInfoByTime(int pageIndex) {
		Page page=pageTool.selectPage(pageIndex);
		List<Object> piList=backPreInfoDao.selectAllPreInfoByTime(page);
		int count=backPreInfoDao.selectPiCount();
		HashMap<Integer, List<Object>> anMap=new FeeUtils().packageAn(piList, pageIndex, count);
		return anMap;
	}

	@Override
	public HashMap<Integer, List<Object>> selectAllPreInfoById(int pageIndex) {
		Page page=pageTool.selectPage(pageIndex);
		List<Object> piList=backPreInfoDao.selectAllPreInfoById(page);
		int count=backPreInfoDao.selectPiCount();
		HashMap<Integer, List<Object>> anMap=new FeeUtils().packageAn(piList, pageIndex, count);
		return anMap;
	}

	@Override
	public HashMap<Integer, Object> selectSendArPIList(int feeType,
			int pageIndex) {
		HashMap<Integer, Object> anMap=new HashMap<Integer, Object>();
		List<PiPayRecord> pprList=new ArrayList<PiPayRecord>();
		int count=0;
		if(feeType==1){
			pprList= backPreInfoDao.selectPiAfList(pageIndex);
			count=backPreInfoDao.selectCountPiAf();
		}else if(feeType==2){
			pprList= backPreInfoDao.selectPiFcList(pageIndex);
			count=backPreInfoDao.selectCountPiFc();
		}else if(feeType==3){
			pprList= backPreInfoDao.selectPiNlfList(pageIndex);
			count=backPreInfoDao.selectCountPiNlf();
		}else{
			pprList= backPreInfoDao.selectPiAfList(pageIndex);
			count=backPreInfoDao.selectCountPiAf();
		}
		anMap=new FeeUtils().packagePPRTotal(pprList, pageIndex, count);
		return anMap;
	}

	@Override
	public HashMap<Integer, Object> selectAllPI(int pageIndex) {
		return null;
	}

	@Override
	public HashMap<Integer, Object> selectPIByClubId(int club_id, int pageIndex) {
		return null;
	}

	@Override
	public HashMap<Integer, Object> selectPIByClubName(String club_name,
			int pageIndex) {
		return null;
	}

	@Override
	public HashMap<Integer, Object> selectPIByCICN(int club_id,
			String club_name, int pageIndex) {
		return null;
	}

	@Override
	public HashMap<Integer, Object> selectAllPIByTime(int pageIndex) {
		HashMap<Integer, Object> anMap=new HashMap<Integer, Object>();
		List<PriView> priList=backPreInfoDao.selectAllPIByTime(pageIndex);
		int count=backPreInfoDao.selectCountPIByTime();
		anMap=new FeeUtils().packagePriViewTotal(priList, pageIndex, count);
		return anMap;
	}

	@Override
	public HashMap<Integer, Object> selectAllPIByCname(String club_name,
			int pageIndex) {
		club_name=TransCoding.transCoding(club_name);
		club_name="%"+club_name+"%";
		HashMap<Integer, Object> anMap=new HashMap<Integer, Object>();
		List<PriView> priList=backPreInfoDao.selectAllPIByName(pageIndex,club_name);
		int count=backPreInfoDao.selectCountPIByCName(club_name);
		anMap=new FeeUtils().packagePriViewTotal(priList, pageIndex, count);
		return anMap;
	}

	@Override
	public HashMap<Integer, Object> selectAllPIByCId(int club_id, int pageIndex) {
		HashMap<Integer, Object> anMap=new HashMap<Integer, Object>();
		List<PriView> priList=backPreInfoDao.selectAllPIByCId(pageIndex,club_id);
		int count=backPreInfoDao.selectCountPIByCId(club_id);
		anMap=new FeeUtils().packagePriViewTotal(priList, pageIndex, count);
		return anMap;
	}
	
}
