package com.zeepn.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.zeepn.bean.Comments;
import com.zeepn.bean.DynPic;
import com.zeepn.bean.PersonDyn;
import com.zeepn.bean.Reply;
import com.zeepn.dao.UserDao;
import com.zeepn.dao.UserDynDao;
import com.zeepn.service.UserDynService;
import com.zeepn.utils.DateFormat;
@Component("userDynService")
public class UserDynServiceImpl implements UserDynService {

	@Autowired
	UserDynDao userDynDao;
	UserDao userDao;
	@Transactional
	@Override
	public boolean userPublishDyn(PersonDyn personDyn) {
		boolean flag=false;
		if(userDynDao.publishdyn(personDyn)>0){
			flag=true;
		}
		return flag;
	}
	@Transactional
	@Override
	public boolean userDynPic(int pd_id,String dp_msg) {
		boolean flag=false;
		if(userDynDao.insertdynPicture(new DynPic(pd_id, dp_msg))>0){
			flag=true;
		}
		return flag;
	}
	
	@Transactional
	@Override
	public boolean deletedyn(int pd_id) {
		boolean flag=false;
		userDao.deleteALLCLickLike(pd_id);
		List<Comments> list=userDynDao.showAllComments(pd_id);
		for (Comments comments : list) {
			userDynDao.deleteAllReply(comments.getCom_id());
		}
		userDynDao.deleteAllComments(pd_id);
		userDynDao.deletedyn(pd_id);
		int num=userDynDao.countPic(pd_id);
		if(num==0){
			flag=true;
		}else{
			if(userDynDao.deleteDynPic(pd_id)==num){
				flag=true;
			}
		}
		return flag;
	}


	@Override
	public Map<PersonDyn,List<DynPic>> showDyn(int u_id, int indexPage) {
		Map<PersonDyn,List<DynPic>> map=new HashMap<PersonDyn, List<DynPic>>();
		List<PersonDyn> list=userDynDao.showDyn(u_id, indexPage);
		for (PersonDyn personDyn : list) {
			List<DynPic> li=userDynDao.showDynPic(personDyn.getPd_id());
			map.put(personDyn, li);
		}
		return map;
	}

	@Override
	public List<DynPic> showDynPic(int pd_id) {
		
		return userDynDao.showDynPic(pd_id);
	}
	@Transactional
	@Override
	public Map<PersonDyn,List<DynPic>> selectOneDynById(int pd_id) {
			PersonDyn personDyn=userDynDao.selectOneDynById(pd_id);
			Map<PersonDyn,List<DynPic>> map=new HashMap<PersonDyn, List<DynPic>>();
			List<DynPic> list=userDynDao.showDynPic(pd_id);
			map.put(personDyn, list);
			return map;
	}
	
	@Transactional
	@Override
	public Map<PersonDyn,List<DynPic>> showSpare(int u_id, int pageIndex) {
		Map<PersonDyn,List<DynPic>> map=new HashMap<PersonDyn, List<DynPic>>();
		List<PersonDyn> list=userDynDao.showSpare(u_id, pageIndex);
		for (PersonDyn personDyn : list) {
			List<DynPic> li=userDynDao.showDynPic(personDyn.getPd_id());
			map.put(personDyn, li);
		}
		return map;
	}

	@Override
	public int insertComments(Comments comments) {
		int user_id=userDynDao.selectUidByPdid(comments.getPd_id());
		String com_time=DateFormat.getCurrentTime(DateFormat.DEFAULT_DATE_FORMAT_MSEC);
		String u_nick=userDao.selectUserNameById(comments.getU_id());
		comments.setUser_id(user_id);
		comments.setU_nick(u_nick);
		comments.setCom_time(com_time);
		return userDynDao.insertComments(comments);
	}

	@Override
	public int insertReply(Reply reply) {
		String rp_time=DateFormat.getCurrentTime(DateFormat.DEFAULT_DATE_FORMAT_MSEC);
		String rp_nick=userDao.selectUserNameById(reply.getRp_pid());
		String rp_rnick=userDao.selectUserNameById(reply.getRp_rpid());
		reply.setRp_nick(rp_nick);
		reply.setRp_rnick(rp_rnick);
		reply.setRp_time(rp_time);
		return userDynDao.insertReply(reply);
	}

	@Override
	public List<Comments> showAllComments(int pd_id) {
		
		return userDynDao.showAllComments(pd_id);
	}

	
	@Override
	public List<Reply> showAllReply(int com_id) {
		
		return userDynDao.showAllReply(com_id);
	}

	/**
	 * 第一次为评论，所以只要有新的回复，那么就是该评论下的回复
	 */
	@Override
	public Map<PersonDyn,List<Comments>>  showNewReply(int u_id) {
		List<Reply> list=userDynDao.showNewReply(u_id);
		List<Integer> listInteger=new ArrayList<Integer>();
		List<Comments> listComments=new ArrayList<Comments>();
		Map<PersonDyn,List<Comments>> map=new HashMap<PersonDyn, List<Comments>>();
		//通过回复找到评论
		for (Reply reply : list) {
			for(Integer i:listInteger){
				if(i!=reply.getCom_id()){
					listComments.add(userDynDao.showCommentsById(reply.getCom_id()));
					listInteger.add(reply.getCom_id());
				}
			}
			userDynDao.updateReply(reply.getRp_id());
		}
		//清空listInteger集合
		for(int i=0;i<listInteger.size();i++){
			listInteger.remove(i);
		}
		//通过评论找到动态
		for(Comments c:listComments){
			for(Integer i:listInteger){
				if(i!=c.getPd_id()){
					PersonDyn personDyn=userDynDao.selectOneDynById(c.getPd_id());
					List<Comments> li=new ArrayList<Comments>();
					li.add(c);
					map.put(personDyn, li);
					listInteger.add(c.getPd_id());
				}else{
					map.get(i).add(c);
				}
			}
		}
		return map;
	}

	@Transactional
	@Override
	public Map<PersonDyn,List<Comments>> showNewComments(int user_id) {
		List<Comments> list=userDynDao.showNewComments(user_id);
		List<Integer> listInteger=new ArrayList<Integer>();
		Map<PersonDyn,List<Comments>> map=new HashMap<PersonDyn, List<Comments>>();
		for(Comments c:list){
			for(Integer i:listInteger){
				if(i!=c.getPd_id()){
					PersonDyn personDyn=userDynDao.selectOneDynById(c.getPd_id());
					List<Comments> li=new ArrayList<Comments>();
					list.add(c);
					map.put(personDyn, li);
				}else{
					map.get(i).add(c);
				}	
			}
			userDynDao.updateComments(c.getCom_id());
		}
	
		return map;
	}



	@Override
	public boolean deleteComments(int com_id) {
		boolean flag=false;
		userDynDao.deleteAllReply(com_id);
		if(userDynDao.deleteComments(com_id)>0){
			flag=true;
		}
		return flag;
	}

	@Override
	public int deleteReply(int rp_id) {
		
		return userDynDao.deleteReply(rp_id);
	}
	@Override
	public Map<Comments, List<Reply>> showAllCommentsAndReply(int pd_id) {
		Map<Comments, List<Reply>> map =new HashMap<Comments, List<Reply>>();
		List<Comments> list=userDynDao.showAllComments(pd_id);
		for (Comments comments : list) {
			List<Reply> li=userDynDao.showAllReply(comments.getCom_id());
			map.put(comments, li);
			}
		return map;
	}
	@Override
	public int selectDynByTime(int u_id, String pd_time) {
		
		return userDynDao.selectDynByTime(u_id, pd_time);
	}
	@Override
	public int deletePicByTimeAndPdId(int pd_id, String pd_msg) {
		
		return userDynDao.deletePicByTimeAndPdId(pd_id, pd_msg);
	}
	
}
