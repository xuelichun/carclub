package com.zeepn.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.zeepn.bean.Comments;
import com.zeepn.bean.DynPic;
import com.zeepn.bean.PersonDyn;
import com.zeepn.bean.PhotoAlbum;
import com.zeepn.bean.Reply;
import com.zeepn.service.PersonDynService;
import com.zeepn.utils.DateFormat;
import com.zeepn.utils.Upload;

@Controller
public class PersonDynController {
	@Autowired
	PersonDynService personDynService;
	@RequestMapping("/personDyna")
	@ResponseBody
	public int createPersonDyn(PersonDyn personDyn){
		System.out.println(personDyn);
		int row=personDynService.createPersonDyn(personDyn);
		System.out.println(row);
		return row;
	}
	@RequestMapping(value="/personDynb",method=RequestMethod.POST)
	@ResponseBody
	public int createPersonDynPic( @RequestParam MultipartFile[] dp_msg, HttpServletRequest request,PersonDyn personDyn)throws IOException{
	System.out.println(1);
		int account=0;
		System.out.println(personDyn);
		int row=personDynService.createPersonDyn(personDyn);
		System.out.println(row);
		int pd_id=personDynService.selectPIdByTime(personDyn.getU_id(), personDyn.getPd_time());
		DynPic dynPic=new DynPic(pd_id);
		System.out.println(dynPic);
		for(MultipartFile file:dp_msg){
			String dp_msgTemp=Upload.uploadPicture(file, request,"image");
			if(dp_msgTemp!=null){
				dynPic.setDp_msg(dp_msgTemp);
				
				int flag=personDynService.createDynPicture(dynPic);
				if(flag==1){
					account++;
				}
			}
		}
		
		return account;
	}
	
	
	@RequestMapping("/personDync")
	@ResponseBody
	public boolean deletePersonDyn(int pd_id){
		boolean flag=personDynService.deletePersonDyn(pd_id);
		return flag;
	}
	@RequestMapping("/personDynd")
	@ResponseBody
	public int deleteDynPic(int pd_id){
		int row=personDynService.deleteDynPic(pd_id);
		return row;
	}
	@RequestMapping("/personDyne")
	@ResponseBody
	public Map<PersonDyn,List<DynPic>> showDyn(int u_id, int indexPage){
		return personDynService.showDyn(u_id, indexPage);
		
	}
	@RequestMapping("/personDynf")
	@ResponseBody
	public List<DynPic> showDynPic(int pd_id){
		List<DynPic> dynPic=personDynService.showDynPic(pd_id);
		return dynPic;
	}
	@RequestMapping("/personDyng")
	@ResponseBody
	public Map<PersonDyn,List<DynPic>> selectOneDynById(int pd_id){
		Map<PersonDyn,List<DynPic>> personDyn=personDynService.selectOneDynById(pd_id);
		return personDyn;
	}
	@RequestMapping("/personDynh")
	@ResponseBody
	public Map<PersonDyn,List<DynPic>> showSpare(int u_id, int pageIndex){
		Map<PersonDyn,List<DynPic>> personDyn=personDynService.showSpare(u_id, pageIndex);
		return personDyn;
	}
	@RequestMapping("/personDyni")
	@ResponseBody
	public int createComments(Comments comments){
		int row=personDynService.createComments(comments);
		return row;
	}
	@RequestMapping("/personDynj")
	@ResponseBody
	public int createReply(Reply reply){
		int row=personDynService.createReply(reply);
		return row;
	}
	@RequestMapping("/personDynk")
	@ResponseBody
	public List<Comments> showAllComments(int pd_id){
		List<Comments> comments=personDynService.showAllComments(pd_id);
		return comments;
	}
	@RequestMapping("/personDynl")
	@ResponseBody
	public List<Reply> showAllReply(int com_id){
		List<Reply> reply=personDynService.showAllReply(com_id);
		return reply;
	}
	@RequestMapping("/personDynm")
	@ResponseBody
	public Comments showCommentsById(int com_id){
		Comments comments=personDynService.showCommentsById(com_id);
		return comments;
	}
	@RequestMapping("/personDynn")
	@ResponseBody
	public Map<PersonDyn,List<Comments>>  showNewReply(int u_id){
		Map<PersonDyn,List<Comments>> reply=personDynService.showNewReply( u_id);
		 return reply;
	}
	@RequestMapping("/personDyno")
	@ResponseBody
	public Map<PersonDyn,List<Comments>> showNewComments(int user_id){
		Map<PersonDyn,List<Comments>> comments=personDynService.showNewComments(user_id);
		return comments;
	}
	@RequestMapping("/personDynp")
	@ResponseBody
	public int updateReply(int rp_id){
		int row=personDynService.updateReply(rp_id);
		return row;
	}
	@RequestMapping("/personDynq")
	@ResponseBody
	public int updateComments(int com_id){
		int row=personDynService.updateComments(com_id);
		return row;
	}
	@RequestMapping("/personDynr")
	@ResponseBody
	public boolean deleteComments(int com_id){
		 boolean flag=personDynService.deleteComments(com_id);
		return flag;
	}
	@RequestMapping("/personDyns")
	@ResponseBody
	public int deleteReply(int com_id){
		int row=personDynService.deleteReply(com_id);
		return row;
	}
}
